@* @{
    ViewData["Title"] = "Login";
    Layout = "~/Views/Shared/_Layout_Login.cshtml";
}

@section Styles {
    <style>
        body {
            background: #f1f5f9;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            color: #334155;
        }

        .login-container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .login-card {
            width: 100%;
            max-width: 360px;
            border-radius: 16px;
            box-shadow: 0 4px 25px rgba(0, 0, 0, 0.1);
            padding: 30px 25px;
            background: #ffffff;
            border: 1px solid #e2e8f0;
            position: relative;
            overflow: hidden;
        }

            .login-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: linear-gradient(90deg, #0ea5e9, #3b82f6);
                border-radius: 16px 16px 0 0;
            }

        .login-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .logo-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #0ea5e9, #3b82f6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 15px;
            color: white;
            font-size: 20px;
            box-shadow: 0 4px 15px rgba(14, 165, 233, 0.3);
        }

        .login-header h3 {
            font-weight: 700;
            margin-bottom: 5px;
            color: #1e293b;
            font-size: 1.5rem;
        }

        .login-header p {
            color: #64748b;
            font-size: 0.9rem;
            margin: 0;
        }

        /* Compact Input Group Styling */
        .input-group {
            position: relative;
            margin-bottom: 16px;
        }

        .input-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #94a3b8;
            font-size: 16px;
            z-index: 2;
            transition: color 0.2s ease;
        }

        .form-control {
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            padding: 12px 12px 12px 40px;
            height: 48px;
            font-size: 15px;
            transition: all 0.2s ease;
            background: #ffffff;
            color: #374151;
            width: 100%;
        }

            .form-control:focus {
                border-color: #0ea5e9;
                box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
                outline: none;
            }

                .form-control:focus + .input-icon {
                    color: #0ea5e9;
                }

            .form-control::placeholder {
                color: #9ca3af;
                font-size: 14px;
            }

        /* Options Row */
        .form-options {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            font-size: 13px;
        }

        .remember-checkbox {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-check-input {
            width: 16px;
            height: 16px;
            border: 2px solid #d1d5db;
            border-radius: 4px;
        }

            .form-check-input:checked {
                background-color: #0ea5e9;
                border-color: #0ea5e9;
            }

        .form-check-label {
            color: #64748b;
            font-weight: 500;
            margin: 0;
        }

        .forgot-link {
            color: #0ea5e9;
            text-decoration: none;
            font-weight: 600;
            transition: color 0.2s ease;
        }

            .forgot-link:hover {
                color: #0284c7;
            }

        /* Compact Login Button */
        .btn-login {
            width: 100%;
            border-radius: 10px;
            padding: 12px 20px;
            font-weight: 600;
            font-size: 15px;
            background: linear-gradient(135deg, #0ea5e9, #3b82f6);
            border: none;
            color: white;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
            margin-bottom: 20px;
        }

            .btn-login:hover {
                transform: translateY(-1px);
                box-shadow: 0 6px 20px rgba(14, 165, 233, 0.3);
            }

            .btn-login:active {
                transform: translateY(0);
            }

        /* Footer */
        .login-footer {
            text-align: center;
            padding-top: 15px;
            border-top: 1px solid #f1f5f9;
        }

            .login-footer small {
                color: #64748b;
                font-size: 13px;
            }

            .login-footer a {
                color: #0ea5e9;
                text-decoration: none;
                font-weight: 600;
            }

                .login-footer a:hover {
                    text-decoration: underline;
                }

        /* Error Alert */
        .alert-danger {
            border-radius: 8px;
            border: 1px solid #fca5a5;
            background: #fef2f2;
            color: #dc2626;
            padding: 10px 12px;
            margin-bottom: 16px;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        /* Loading State */
        .btn-login.loading {
            pointer-events: none;
            opacity: 0.8;
        }

            .btn-login.loading::after {
                content: '';
                position: absolute;
                width: 16px;
                height: 16px;
                top: 50%;
                left: 50%;
                margin-left: -8px;
                margin-top: -8px;
                border: 2px solid transparent;
                border-top: 2px solid #ffffff;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }

        @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Responsive */
        @@media (max-width: 480px) {
            .login-card

        {
            padding: 25px 20px;
            margin: 10px;
            max-width: 320px;
        }

        .login-header h3 {
            font-size: 1.3rem;
        }

        .form-options {
            flex-direction: column;
            gap: 10px;
            text-align: center;
        }

        }
    </style>
}

<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <div class="logo-icon">
                <i class="fas fa-hospital"></i>
            </div>
            <h3>Welcome Back</h3>
            <p>Sign in to continue</p>
        </div>

        <!-- Error message display -->
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-triangle"></i>
                @TempData["Error"]
            </div>
        }

        <form method="post" asp-action="Login" asp-controller="User" id="loginForm">
            <!-- Email Input with Icon -->
            <div class="input-group">
                <input type="email"
                       class="form-control"
                       id="email"
                       name="Email"
                       placeholder="Enter your email"
                       required />
                <i class="fas fa-envelope input-icon"></i>
            </div>

            <!-- Password Input with Icon -->
            <div class="input-group">
                <input type="password"
                       class="form-control"
                       id="password"
                       name="Password"
                       placeholder="Enter your password"
                       required />
                <i class="fas fa-lock input-icon"></i>
            </div>

            <!-- Remember Me & Forgot Password -->
            <div class="form-options">
                <div class="remember-checkbox">
                    <input class="form-check-input"
                           type="checkbox"
                           id="rememberMe"
                           name="RememberMe" />
                    <label class="form-check-label" for="rememberMe">
                        Remember me
                    </label>
                </div>
            </div>

            <!-- Login Button -->
            <button type="submit" class="btn btn-login" id="loginBtn">
                <i class="fas fa-sign-in-alt me-2"></i>
                <span class="btn-text">Sign In</span>
            </button>
        </form>

        <div class="login-footer">
            <small>Don't have an account? <a href="@Url.Action("SignUp", "User")">Sign up</a></small>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Include Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <script>
        // Form submission with loading state
        document.getElementById('loginForm').addEventListener('submit', function() {
            const loginBtn = document.getElementById('loginBtn');
            const btnText = loginBtn.querySelector('.btn-text');

            loginBtn.classList.add('loading');
            btnText.textContent = 'Signing in...';
            loginBtn.disabled = true;
        });

        // Show error alert if login fails
        @if (TempData["Error"] != null)
        {
                <text>
                    if (typeof Swal !== 'undefined') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Login Failed',
                            text: '@TempData["Error"]',
                            confirmButtonColor: '#0ea5e9'
                        });
                    }
                </text>
        }

        // Form validation
        function validateForm() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;

            if (!email || !password) {
                return false;
            }
            return true;
        }

        // Add form validation on submit
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            if (!validateForm()) {
                e.preventDefault();
                const loginBtn = document.getElementById('loginBtn');
                const btnText = loginBtn.querySelector('.btn-text');

                loginBtn.classList.remove('loading');
                btnText.textContent = 'Sign In';
                loginBtn.disabled = false;
            }
        });

        // Enhanced input focus effects
        document.querySelectorAll('.form-control').forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.classList.add('focused');
            });

            input.addEventListener('blur', function() {
                this.parentElement.classList.remove('focused');
            });
        });
    </script>
} *@
@{
    ViewData["Title"] = "CityCare Login";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome -->
    <script src="https://kit.fontawesome.com/4006c62b6e.js" crossorigin="anonymous"></script>

    <style>
        :root {
            --primary-color: #005a9e; /* Blue from your logo */
            --secondary-color: #2a9d8f; /* Teal from your logo */
            --light-gray: #f8f9fa;
            --dark-text: #343a40;
        }

        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(-45deg, #eef7ff, #d1eaff, #b8deff, #a1d1ff);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
        }

        @@keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        .login-container {
            width: 100%;
            max-width: 800px; /* Wider format */
            background-color: #fff;
            border-radius: 20px;
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            animation: fadeIn 1s ease-out;
        }
        
        @@keyframes fadeIn {
            from { opacity: 0; transform: scale(0.95); }
            to { opacity: 1; transform: scale(1); }
        }

        .login-header {
            padding: 2.5rem;
            text-align: center;
            background-color: var(--light-gray);
        }

        .login-header img {
            max-width: 220px;
            margin-bottom: 1rem;
        }

        .login-header h2 {
            color: var(--primary-color);
            font-weight: 700;
            margin: 0;
        }
        
        .login-header p {
            color: #6c757d;
            margin-top: 0.5rem;
        }

        .login-body {
            padding: 3rem 4rem;
        }

        .form-group {
            position: relative;
            margin-bottom: 1.75rem;
        }

        .form-control-lg {
            height: 55px;
            padding-left: 3rem;
            border: 1px solid #ced4da;
            border-radius: 10px;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        
        .form-control-lg:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(0, 90, 158, 0.2);
        }

        .form-group .form-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #adb5bd;
            font-size: 1.2rem;
            transition: color 0.3s ease;
        }
        
        .form-control-lg:focus + .form-icon {
            color: var(--primary-color);
        }

        .btn-primary {
            background-color: var(--primary-color);
            border: none;
            padding: 0.8rem;
            border-radius: 10px;
            font-weight: 600;
            font-size: 1.1rem;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .btn-primary:hover {
            background-color: var(--secondary-color);
            transform: translateY(-2px);
        }
        
        .form-text a {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
            cursor: pointer; /* To indicate it's clickable */
        }
        .form-text a:hover {
            text-decoration: underline;
        }

    </style>
</head>
<body>

<div class="login-container">
    <div class="login-header">
        <i class="fa-regular fa-hospital fa-beat-fade fs-1" style="color: #0d54af;"></i>
        @* <img src="~/images/citycare-logo.jpg" alt="CityCare Logo"> *@
        <br />
        <h2 class="m-3">HMS Portal Login</h2>
        <p>Welcome to the CityCare professional portal.</p>
    </div>

    <div class="login-body">
        @using (Html.BeginForm("UserLogin", "User", FormMethod.Post))
        {
            <div class="form-group">
                <input type="text" id="username" name="Username" class="form-control form-control-lg" placeholder="Username" required />
                <i class="bi bi-person form-icon"></i>
            </div>

            <div class="form-group">
                <input type="password" id="password" name="Password" class="form-control form-control-lg" placeholder="Password" required />
                <i class="bi bi-lock form-icon"></i>
            </div>

            <div class="d-grid gap-2 mt-4">
                <button class="btn btn-primary btn-lg" type="submit">
                    Sign In Securely
                </button>
            </div>
            
            <div class="text-center mt-4 form-text">
                <!-- This link now opens the modal -->
                <h6>
                    Have not any Account?
                 <a href="@Url.Action("SignUp", "User")">Sign up</a>
                 </h6>
            </div>
        }
    </div>
</div>

<!-- Gemini AI Help Modal -->
<div class="modal fade" id="aiHelpModal" tabindex="-1" aria-labelledby="aiHelpModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="aiHelpModalLabel">Account Recovery Assistant</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="aiHelpForm">
            <p>Please enter your username below. Our AI assistant will provide you with the next steps.</p>
            <div class="mb-3">
                <label for="recoveryUsername" class="form-label">Username</label>
                <input type="text" class="form-control" id="recoveryUsername" placeholder="e.g., j.doe">
            </div>
            <button type="button" class="btn btn-primary w-100" id="getAiHelpBtn">
                ✨ Get AI Assistance
            </button>
        </div>
        <div id="aiHelpResponse" class="d-none">
            <!-- AI response will be injected here -->
        </div>
        <div id="loadingIndicator" class="text-center d-none">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Consulting our AI assistant...</p>
        </div>
      </div>
    </div>
  </div>
</div>


<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- Gemini API Integration Script -->
<script>
    document.getElementById('getAiHelpBtn').addEventListener('click', async () => {
        const username = document.getElementById('recoveryUsername').value;
        if (!username) {
            alert('Please enter your username.');
            return;
        }

        const aiHelpForm = document.getElementById('aiHelpForm');
        const aiHelpResponse = document.getElementById('aiHelpResponse');
        const loadingIndicator = document.getElementById('loadingIndicator');

        // Hide form and show loading indicator
        aiHelpForm.classList.add('d-none');
        loadingIndicator.classList.remove('d-none');
        aiHelpResponse.classList.add('d-none');
        aiHelpResponse.innerHTML = ''; // Clear previous results

        // System prompt to define the AI's role
        const systemPrompt = `You are a helpful and professional IT support assistant for the 'CityCare' hospital portal. Your role is to provide clear, concise, and friendly instructions for password recovery. Do not offer to reset the password yourself. Provide a standard procedure. Address the user by their username.`;

        // User query for the AI model
        const userQuery = `A user with the username "${username}" has forgotten their password. Please generate a set of instructions for them to follow. The instructions should mention contacting the IT helpdesk at helpdesk@citycare.hospital or calling extension 1234 for an immediate password reset link.`;
        
        const apiKey = ""; // API key is handled by the environment
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        const payload = {
            contents: [{ parts: [{ text: userQuery }] }],
            systemInstruction: {
                parts: [{ text: systemPrompt }]
            },
        };

        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API request failed with status ${response.status}`);
            }

            const result = await response.json();
            const candidate = result.candidates?.[0];

            if (candidate && candidate.content?.parts?.[0]?.text) {
                // Sanitize and format the text response as HTML
                const formattedResponse = candidate.content.parts[0].text
                    .replace(/\n/g, '<br>')
                    .replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>'); // Bold text
                aiHelpResponse.innerHTML = formattedResponse;
            } else {
                aiHelpResponse.innerHTML = '<p class="text-danger">Sorry, we could not get a response from our AI assistant at this time. Please try again later or contact support directly.</p>';
            }
        } catch (error) {
            console.error('Error calling Gemini API:', error);
            aiHelpResponse.innerHTML = '<p class="text-danger">An error occurred while trying to get assistance. Please check the console for details.</p>';
        } finally {
            // Hide loading indicator and show the response
            loadingIndicator.classList.add('d-none');
            aiHelpResponse.classList.remove('d-none');
        }
    });

    // Reset the modal when it's closed
    const aiHelpModal = document.getElementById('aiHelpModal');
    aiHelpModal.addEventListener('hidden.bs.modal', function () {
        document.getElementById('aiHelpForm').classList.remove('d-none');
        document.getElementById('aiHelpResponse').classList.add('d-none');
        document.getElementById('loadingIndicator').classList.add('d-none');
        document.getElementById('recoveryUsername').value = '';
    });
</script>

</body>
</html>
